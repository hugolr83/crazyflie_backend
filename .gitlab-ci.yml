image:  $CI_REGISTRY_IMAGE/ci:0.0.2

.cache: &pull_cache
  - key:
      files:
        - poetry.lock
    paths:
      - .venv
    policy: pull

.only: &only
  refs:
    - main
    - merge_requests

.except: &exclude_release
  changes:
    - CHANGELOG.md

.only_release: &only_release
  refs:
    - main
  variables:
    - $CI_COMMIT_AUTHOR == "Alfred Pennyworth <alfred.pennyworth@polymtl.ca>"

stages:
  - install
  - test
  - tag_release
  - build_and_push_backend_image
  - generate_api_client
  - publish_api_client

install:
  stage: install
  script:
    - poetry config virtualenvs.in-project true
    - poetry install --no-root
    - echo "BACKEND_VERSION=$(poetry version --short)" >> install.env
  cache:
  - key:
      files:
        - poetry.lock
    paths:
      - .venv
    policy: pull-push
  only: *only
  artifacts:
    reports:
      dotenv: install.env

static:
  stage: test
  script:
    - poetry run black . --check
    - poetry run flake8
    - poetry run mypy . --show-error-codes
  cache: *pull_cache
  only: *only
  except: *exclude_release
  dependencies:
    - install

tests:
  stage: test
  script:
    - poetry run pytest --cov=backend
    - poetry run coverage xml
  cache: *pull_cache
  only: *only
  except: *exclude_release
  dependencies:
    - install
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      cobertura: coverage.xml

tag_release:
  stage: tag_release
  script:
    - git remote set-url origin https://root:$SEMANTIC_RELEASE_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
    - git config --global user.name "Alfred Pennyworth"
    - git config --global user.email "alfred.pennyworth@polymtl.ca"
    - poetry run semantic-release publish
  cache: *pull_cache
  only:
    refs:
      - main
  except: *exclude_release
  variables:
    GIT_STRATEGY: clone
    GITLAB_CI: "true"
  dependencies:
    - static
    - tests

build_and_push_backend_image:
  stage: build_and_push_backend_image
  image: docker:latest
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/backend:$BACKEND_VERSION
    FETCHER_IMAGE_TAG: $CI_REGISTRY_IMAGE/schema-fetcher:0.0.1
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - docker build -t $IMAGE_TAG .
    - docker network create ci_network
    - docker run -d -e ONLY_SERVE_OPENAPI_SCHEMA=1 --network ci_network --name backend $IMAGE_TAG
    - sleep 5s
    - docker run -dit --network ci_network --name fetcher $FETCHER_IMAGE_TAG
    - docker exec fetcher curl http://backend:8000/openapi.json --output /tmp/openapi.json
    - docker cp fetcher:/tmp/openapi.json openapi.json
    - docker rm -f fetcher
    - docker rm -f backend
    - docker push $IMAGE_TAG
  only: *only_release
  dependencies:
    - install
  artifacts:
    paths:
      - openapi.json

generate_api_client:
  stage: generate_api_client
  image: $CI_REGISTRY_IMAGE/openapi-generator-cli:0.0.2
  variables:
    NPM_REPO_URL: $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/npm/
  script:
    - >
      java -jar /openapitools/openapi-generator-cli.jar generate -g typescript-angular -c ci/openapi-generator-config.yaml
      -o client -i openapi.json --additional-properties=npmRepository=$NPM_REPO_URL
  only: *only_release
  artifacts:
    paths:
      - client/
  dependencies:
    - build_and_push_backend_image

publish_api_client:
  stage: publish_api_client
  image: node:lts-bullseye-slim
  script:
    - cd client
    - npm install
    - npm run build
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" > .npmrc
    - npm publish dist
  only: *only_release
  dependencies:
    - generate_api_client
