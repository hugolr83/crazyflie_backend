image: registry.gitlab.com/polytechnique-montr-al/inf3995/20213/equipe-100/inf3995-backend/ci:0.0.2

.cache: &pull_cache
  - key:
      files:
        - poetry.lock
    paths:
      - .venv
    policy: pull

.only: &only
  refs:
    - main
    - merge_requests

.except: &exclude_release
  changes:
    - CHANGELOG.md

.only_release: &only_release
  refs:
    - main
  variables:
    - $CI_COMMIT_AUTHOR == "Alfred Pennyworth <alfred.pennyworth@polymtl.ca>"

stages:
  - install
  - test
  - tag_release
  - publish_backend_package
  - build_and_push_backend_image

install:
  stage: install
  script:
    - poetry config virtualenvs.in-project true
    - poetry install --no-root
    - echo "BACKEND_VERSION=$(poetry version --short)" >> install.env
  cache:
  - key:
      files:
        - poetry.lock
    paths:
      - .venv
    policy: pull-push
  only: *only
  artifacts:
    reports:
      dotenv: install.env

static:
  stage: test
  script:
    - poetry run black . --check
    - poetry run flake8
    - poetry run mypy . --show-error-codes
  cache: *pull_cache
  only: *only
  except: *exclude_release
  dependencies:
    - install

tests:
  stage: test
  script:
    - poetry run pytest --cov=backend
    - poetry run coverage xml
  cache: *pull_cache
  only: *only
  except: *exclude_release
  dependencies:
    - install
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      cobertura: coverage.xml

tag_release:
  stage: tag_release
  script:
    - git remote set-url origin https://root:$SEMANTIC_RELEASE_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
    - git config --global user.name "Alfred Pennyworth"
    - git config --global user.email "alfred.pennyworth@polymtl.ca"
    - poetry run semantic-release publish
  cache: *pull_cache
  only:
    refs:
      - main
  except: *exclude_release
  variables:
    GIT_STRATEGY: clone
    GITLAB_CI: "true"
  dependencies:
    - static
    - tests

publish_backend_package:
  stage: publish_backend_package
  script:
    - poetry build
    - poetry publish --repository gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN
  cache: *pull_cache
  only: *only_release
  dependencies:
    - install

build_and_push_backend_image:
  stage: build_and_push_backend_image
  image: registry.gitlab.com/polytechnique-montr-al/inf3995/20213/equipe-100/inf3995-backend/dind:0.0.1
  services:
    - name: docker:dind
      alias: localhost
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/backend:$BACKEND_VERSION
    FETCHER_IMAGE_TAG: $CI_REGISTRY_IMAGE/schema-fetcher:0.0.1
    # the token in only valid during the job, so it's not a huge security issue
    PYPI_REPO_URL: https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.com/api/v4/projects/$CI_PROJECT_ID/packages/pypi/simple
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - docker build -t $IMAGE_TAG --build-arg BACKEND_VERSION=$BACKEND_VERSION --build-arg PYPI_REPO_URL=$PYPI_REPO_URL .
    - docker network create ci_network
    - docker run -d -e ONLY_SERVE_OPENAPI_SCHEMA=1 --name backend --network ci_network $IMAGE_TAG
    - sleep 10s
    - docker run -dit --name fetcher --network ci_network $FETCHER_IMAGE_TAG
    - docker exec fetcher curl http://backend:8000/openapi.json --output /tmp/openapi.json
    - docker cp fetcher:/tmp/openapi.json openapi.json
    - docker rm -f fetcher
    - docker rm -f backend
    # - docker push $IMAGE_TAG
  only: *only
  dependencies:
    - install
    # - publish_backend_package
  artifacts:
    paths:
      - openapi.json
